name: CI/CD Pipeline for S3 + EC2 Website

on:
  push:
    branches: [main]
    paths:
      - 'app/**'
      - 'terraform/ec2.tf'
      - 'terraform/*.tfvars'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: app

    steps:
      # STAGE 1: SETUP
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # STAGE 2: S3 DEPLOYMENT
      - name: Sync static content to S3
        run: |
          aws s3 sync . s3://${{ secrets.AWS_S3_BUCKET }} \
            --delete \
            --acl public-read \
            --exclude ".git/*" \
            --exclude ".terraform/*"

          # Set proper content types
          aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/ s3://${{ secrets.AWS_S3_BUCKET }}/ \
            --recursive \
            --exclude "*" \
            --include "*.html" --content-type "text/html" \
            --include "*.css" --content-type "text/css" \
            --include "*.js" --content-type "application/javascript" \
            --metadata-directive REPLACE

      # STAGE 3: EC2 DEPLOYMENT
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var="s3_bucket_name=${{ secrets.AWS_S3_BUCKET }}"

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve -var="s3_bucket_name=${{ secrets.AWS_S3_BUCKET }}"

      # STAGE 4: POST-DEPLOYMENT
      - name: Refresh EC2 instances
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[?Tags[?Key=='Name' && contains(Value, 'web-asg')]].AutoScalingGroupName" \
            --output text)
          
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{
              "InstanceWarmup": 30,
              "MinHealthyPercentage": 90,
              "SkipMatching": false
            }'

      - name: Verify deployment
        run: |
          # Verify S3
          aws s3 ls s3://${{ secrets.AWS_S3_BUCKET }} --recursive --human-readable
          
          # Verify EC2
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?contains(LoadBalancerName, 'web-alb')].DNSName" \
            --output text)
          echo "Website URL: http://$ALB_DNS"
          curl -I http://$ALB_DNS