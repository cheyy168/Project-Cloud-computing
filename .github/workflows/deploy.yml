name: Deploy Static Site to S3

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify directory structure
        run: |
          ls -la
          echo "Current path: $(pwd)"

      - name: Sync all website content
        run: |
          aws s3 sync . s3://${{ secrets.AWS_S3_BUCKET }} --delete --acl public-read

    
 # STAGE 3: EC2 DEPLOYMENT
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var="s3_bucket_name=${{ secrets.AWS_S3_BUCKET }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -input=false -auto-approve tfplan

      # STAGE 4: POST-DEPLOYMENT
      - name: Refresh EC2 instances
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[?Tags[?Key=='Name' && contains(Value, 'web-asg')]].AutoScalingGroupName" \
            --output text)
          
          if [ -n "$ASG_NAME" ]; then
            echo "Starting instance refresh for ASG: $ASG_NAME"
            aws autoscaling start-instance-refresh \
              --auto-scaling-group-name "$ASG_NAME" \
              --preferences '{
                "InstanceWarmup": 30,
                "MinHealthyPercentage": 90,
                "SkipMatching": false
              }'
          else
            echo "No ASG found matching the pattern"
            exit 1
          fi

      - name: Verify deployment
        run: |
          # Verify S3 content
          echo "S3 Bucket Contents:"
          aws s3 ls s3://${{ secrets.AWS_S3_BUCKET }} --recursive --human-readable
          
          # Verify ALB health
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?contains(LoadBalancerName, 'web-alb')].DNSName" \
            --output text)
          
          if [ -z "$ALB_DNS" ]; then
            echo "No ALB found"
            exit 1
          fi
          
          echo "Website URL: http://$ALB_DNS"
          echo "Testing connection..."
          curl -sSfI http://$ALB_DNS -o /dev/null -w "HTTP Status: %{http_code}\n"